# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:19:29+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Header, Path, Query

from models import (
    APIException,
    Employees,
    EmployeesEmployeeIDPostRequest,
    EmployeesPostRequest,
    LeaveApplications,
    LeaveApplicationsLeaveApplicationIDPostRequest,
    LeaveApplicationsPostRequest,
    PayItem,
    PayItems,
    PayrollCalendars,
    PayrollCalendarsPostRequest,
    PayRuns,
    PayRunsPayRunIDPostRequest,
    PayRunsPostRequest,
    PayslipObject,
    PayslipPayslipIDPostRequest,
    Payslips,
    SettingsObject,
    SuperFundProducts,
    SuperFunds,
    SuperfundsPostRequest,
    SuperfundsSuperFundIDPostRequest,
    TimesheetObject,
    Timesheets,
    TimesheetsPostRequest,
    TimesheetsTimesheetIDPostRequest,
)

app = MCPProxy(
    contact={
        'email': 'api@xero.com',
        'name': 'Xero Platform Team',
        'url': 'https://developer.xero.com',
        'x-twitter': 'XeroAPI',
    },
    description='This is the Xero Payroll API for orgs in Australia region.',
    license={
        'name': 'MIT',
        'url': 'https://github.com/XeroAPI/Xero-OpenAPI/blob/master/LICENSE',
    },
    termsOfService='https://developer.xero.com/xero-developer-platform-terms-conditions/',
    title='Xero Payroll AU API',
    version='2.9.4',
    servers=[
        {
            'description': 'Xero Payroll AU API',
            'url': 'https://api.xero.com/payroll.xro/1.0',
        }
    ],
)


@app.get(
    '/Employees',
    tags=['employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_employees(
    if__modified__since: Optional[str] = Header(None, alias='If-Modified-Since'),
    where: Optional[str] = None,
    order: Optional[str] = None,
    page: Optional[int] = None,
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
):
    """
    Searches payroll employees
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/Employees',
    tags=['employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_employee(
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
    body: EmployeesPostRequest = ...,
):
    """
    Creates a payroll employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Employees/{EmployeeID}',
    tags=['employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_employee(
    employee_i_d: UUID = Path(..., alias='EmployeeID'),
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
):
    """
    Retrieves an employee's detail by unique employee id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/Employees/{EmployeeID}',
    description=""" Update properties on a single employee """,
    tags=['employee_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_employee(
    employee_i_d: UUID = Path(..., alias='EmployeeID'),
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
    body: EmployeesEmployeeIDPostRequest = None,
):
    """
    Updates an employee's detail
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/LeaveApplications',
    tags=['leave_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_leave_applications(
    if__modified__since: Optional[str] = Header(None, alias='If-Modified-Since'),
    where: Optional[str] = None,
    order: Optional[str] = None,
    page: Optional[int] = None,
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
):
    """
    Retrieves leave applications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/LeaveApplications',
    tags=['leave_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_leave_application(
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
    body: LeaveApplicationsPostRequest = ...,
):
    """
    Creates a leave application
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/LeaveApplications/{LeaveApplicationID}',
    tags=['leave_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_leave_application(
    leave_application_i_d: UUID = Path(..., alias='LeaveApplicationID'),
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
):
    """
    Retrieves a leave application by a unique leave application id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/LeaveApplications/{LeaveApplicationID}',
    tags=['leave_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_leave_application(
    leave_application_i_d: UUID = Path(..., alias='LeaveApplicationID'),
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
    body: LeaveApplicationsLeaveApplicationIDPostRequest = ...,
):
    """
    Updates a specific leave application
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/PayItems',
    tags=['pay_item_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_pay_items(
    if__modified__since: Optional[str] = Header(None, alias='If-Modified-Since'),
    where: Optional[str] = None,
    order: Optional[str] = None,
    page: Optional[int] = None,
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
):
    """
    Retrieves pay items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/PayItems',
    tags=['pay_item_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_pay_item(
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'), body: PayItem = ...
):
    """
    Creates a pay item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/PayRuns',
    tags=['pay_run_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_pay_runs(
    if__modified__since: Optional[str] = Header(None, alias='If-Modified-Since'),
    where: Optional[str] = None,
    order: Optional[str] = None,
    page: Optional[int] = None,
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
):
    """
    Retrieves pay runs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/PayRuns',
    tags=['pay_run_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_pay_run(
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
    body: PayRunsPostRequest = ...,
):
    """
    Creates a pay run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/PayRuns/{PayRunID}',
    tags=['pay_run_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_pay_run(
    pay_run_i_d: UUID = Path(..., alias='PayRunID'),
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
):
    """
    Retrieves a pay run by using a unique pay run id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/PayRuns/{PayRunID}',
    description=""" Update properties on a single PayRun """,
    tags=['pay_run_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_pay_run(
    pay_run_i_d: UUID = Path(..., alias='PayRunID'),
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
    body: PayRunsPayRunIDPostRequest = None,
):
    """
    Updates a pay run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/PayrollCalendars',
    tags=['payroll_calendar_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_payroll_calendars(
    if__modified__since: Optional[str] = Header(None, alias='If-Modified-Since'),
    where: Optional[str] = None,
    order: Optional[str] = None,
    page: Optional[int] = None,
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
):
    """
    Retrieves payroll calendars
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/PayrollCalendars',
    tags=['payroll_calendar_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_payroll_calendar(
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
    body: PayrollCalendarsPostRequest = ...,
):
    """
    Creates a Payroll Calendar
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/PayrollCalendars/{PayrollCalendarID}',
    tags=['payroll_calendar_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_payroll_calendar(
    payroll_calendar_i_d: UUID = Path(..., alias='PayrollCalendarID'),
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
):
    """
    Retrieves payroll calendar by using a unique payroll calendar ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Payslip/{PayslipID}',
    tags=['payslip_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_payslip(
    payslip_i_d: UUID = Path(..., alias='PayslipID'),
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
):
    """
    Retrieves for a payslip by a unique payslip id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/Payslip/{PayslipID}',
    description=""" Update lines on a single payslips """,
    tags=['payslip_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_payslip(
    payslip_i_d: UUID = Path(..., alias='PayslipID'),
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
    body: PayslipPayslipIDPostRequest = None,
):
    """
    Updates a payslip
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Settings',
    tags=['payroll_settings_configuration_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_settings(xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id')):
    """
    Retrieves payroll settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/SuperfundProducts',
    tags=['superfund_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_superfund_products(
    a_b_n: Optional[str] = Query(None, alias='ABN'),
    u_s_i: Optional[str] = Query(None, alias='USI'),
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
):
    """
    Retrieves superfund products
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Superfunds',
    tags=['superfund_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_superfunds(
    if__modified__since: Optional[str] = Header(None, alias='If-Modified-Since'),
    where: Optional[str] = None,
    order: Optional[str] = None,
    page: Optional[int] = None,
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
):
    """
    Retrieves superfunds
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/Superfunds',
    tags=['superfund_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_superfund(
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
    body: SuperfundsPostRequest = ...,
):
    """
    Creates a superfund
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Superfunds/{SuperFundID}',
    tags=['superfund_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_superfund(
    super_fund_i_d: UUID = Path(..., alias='SuperFundID'),
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
):
    """
    Retrieves a superfund by using a unique superfund ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/Superfunds/{SuperFundID}',
    description=""" Update properties on a single Superfund """,
    tags=['superfund_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_superfund(
    super_fund_i_d: UUID = Path(..., alias='SuperFundID'),
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
    body: SuperfundsSuperFundIDPostRequest = None,
):
    """
    Updates a superfund
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Timesheets',
    tags=['timesheet_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_timesheets(
    if__modified__since: Optional[str] = Header(None, alias='If-Modified-Since'),
    where: Optional[str] = None,
    order: Optional[str] = None,
    page: Optional[int] = None,
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
):
    """
    Retrieves timesheets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/Timesheets',
    tags=['timesheet_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_timesheet(
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
    body: TimesheetsPostRequest = ...,
):
    """
    Creates a timesheet
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Timesheets/{TimesheetID}',
    tags=['timesheet_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_timesheet(
    timesheet_i_d: UUID = Path(..., alias='TimesheetID'),
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
):
    """
    Retrieves a timesheet by using a unique timesheet id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/Timesheets/{TimesheetID}',
    description=""" Update properties on a single timesheet """,
    tags=['timesheet_record_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_timesheet(
    timesheet_i_d: UUID = Path(..., alias='TimesheetID'),
    xero__tenant__id: str = Header(..., alias='Xero-Tenant-Id'),
    body: TimesheetsTimesheetIDPostRequest = None,
):
    """
    Updates a timesheet
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
