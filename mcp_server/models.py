# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:19:29+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional
from uuid import UUID

from pydantic import BaseModel, Field, RootModel, constr


class APIException(BaseModel):
    ErrorNumber: Optional[float] = Field(
        None, description='The error number', examples=[16]
    )
    Message: Optional[str] = Field(
        None,
        description='The message describing the error',
        examples=["No property or field 'hi' exists in type 'Employee' (at index 0)"],
    )
    Type: Optional[str] = Field(
        None, description='The type of error', examples=['QueryParseException']
    )


class AccountType(Enum):
    BANK = 'BANK'
    CURRENT = 'CURRENT'
    CURRLIAB = 'CURRLIAB'
    DEPRECIATN = 'DEPRECIATN'
    DIRECTCOSTS = 'DIRECTCOSTS'
    EQUITY = 'EQUITY'
    EXPENSE = 'EXPENSE'
    FIXED = 'FIXED'
    INVENTORY = 'INVENTORY'
    LIABILITY = 'LIABILITY'
    NONCURRENT = 'NONCURRENT'
    OTHERINCOME = 'OTHERINCOME'
    OVERHEADS = 'OVERHEADS'
    PREPAYMENT = 'PREPAYMENT'
    REVENUE = 'REVENUE'
    SALES = 'SALES'
    TERMLIAB = 'TERMLIAB'
    PAYGLIABILITY = 'PAYGLIABILITY'
    PAYG = 'PAYG'
    SUPERANNUATIONEXPENSE = 'SUPERANNUATIONEXPENSE'
    SUPERANNUATIONLIABILITY = 'SUPERANNUATIONLIABILITY'
    WAGESEXPENSE = 'WAGESEXPENSE'
    WAGESPAYABLELIABILITY = 'WAGESPAYABLELIABILITY'


class AllowanceType(Enum):
    CAR = 'CAR'
    TRANSPORT = 'TRANSPORT'
    TRAVEL = 'TRAVEL'
    LAUNDRY = 'LAUNDRY'
    MEALS = 'MEALS'
    JOBKEEPER = 'JOBKEEPER'
    OTHER = 'OTHER'


class BankAccount(BaseModel):
    AccountName: Optional[str] = Field(
        None, description='The name of the account', examples=['James Lebron Savings']
    )
    AccountNumber: Optional[str] = Field(
        None, description='The account number', examples=[345678]
    )
    Amount: Optional[float] = Field(
        None,
        description='Fixed amounts (for example, if an employee wants to have $100 of their salary transferred to one account, and the remaining amount to another)',
        examples=[200],
    )
    BSB: Optional[str] = Field(
        None, description='The BSB number of the account', examples=[122344]
    )
    Remainder: Optional[bool] = Field(
        None,
        description='If this account is the Remaining bank account',
        examples=[False],
    )
    StatementText: Optional[str] = Field(
        None,
        description="The text that will appear on your employee's bank statement when they receive payment",
        examples=['Salary'],
    )


class CalendarType(Enum):
    WEEKLY = 'WEEKLY'
    FORTNIGHTLY = 'FORTNIGHTLY'
    FOURWEEKLY = 'FOURWEEKLY'
    MONTHLY = 'MONTHLY'
    TWICEMONTHLY = 'TWICEMONTHLY'
    QUARTERLY = 'QUARTERLY'


class DeductionCategory(Enum):
    NONE = 'NONE'
    UNIONFEES = 'UNIONFEES'
    WORKPLACEGIVING = 'WORKPLACEGIVING'


class DeductionType(BaseModel):
    AccountCode: Optional[str] = Field(None, description='See Accounts', examples=[720])
    CurrentRecord: Optional[bool] = Field(
        None, description='Is the current record', examples=[True]
    )
    DeductionCategory_1: Optional[DeductionCategory] = Field(
        None, alias='DeductionCategory'
    )
    DeductionTypeID: Optional[UUID] = Field(
        None,
        description='Xero identifier',
        examples=['e0eb6747-7c17-4075-b804-989f8d4e5d39'],
    )
    IsExemptFromW1: Optional[bool] = Field(
        None,
        description='Boolean to determine if the deduction type is reportable or exempt from W1',
        examples=[False],
    )
    Name: Optional[constr(max_length=100)] = Field(
        None,
        description='Name of the earnings rate (max length = 100)',
        examples=['PTO'],
    )
    ReducesSuper: Optional[bool] = Field(
        None,
        description='Most deductions don’t reduce your superannuation guarantee contribution liability, so typically you will not set any value for this.',
        examples=[False],
    )
    ReducesTax: Optional[bool] = Field(
        None,
        description='Indicates that this is a pre-tax deduction that will reduce the amount of tax you withhold from an employee.',
        examples=[False],
    )
    UpdatedDateUTC: Optional[str] = Field(
        None,
        description='Last modified timestamp',
        examples=['/Date(1583967733054+0000)/'],
    )


class DeductionTypeCalculationType(Enum):
    FIXEDAMOUNT = 'FIXEDAMOUNT'
    PRETAX = 'PRETAX'
    POSTTAX = 'POSTTAX'


class EarningsRateCalculationType(Enum):
    USEEARNINGSRATE = 'USEEARNINGSRATE'
    ENTEREARNINGSRATE = 'ENTEREARNINGSRATE'
    ANNUALSALARY = 'ANNUALSALARY'


class EarningsType(Enum):
    FIXED = 'FIXED'
    ORDINARYTIMEEARNINGS = 'ORDINARYTIMEEARNINGS'
    OVERTIMEEARNINGS = 'OVERTIMEEARNINGS'
    ALLOWANCE = 'ALLOWANCE'
    LUMPSUMD = 'LUMPSUMD'
    EMPLOYMENTTERMINATIONPAYMENT = 'EMPLOYMENTTERMINATIONPAYMENT'
    LUMPSUMA = 'LUMPSUMA'
    LUMPSUMB = 'LUMPSUMB'
    BONUSESANDCOMMISSIONS = 'BONUSESANDCOMMISSIONS'
    LUMPSUME = 'LUMPSUME'


class Gender(Enum):
    N = 'N'
    M = 'M'
    F = 'F'
    I = 'I'


class EmployeeStatus(Enum):
    ACTIVE = 'ACTIVE'
    TERMINATED = 'TERMINATED'


class EmploymentBasis(Enum):
    FULLTIME = 'FULLTIME'
    PARTTIME = 'PARTTIME'
    CASUAL = 'CASUAL'
    LABOURHIRE = 'LABOURHIRE'
    SUPERINCOMESTREAM = 'SUPERINCOMESTREAM'


class EmploymentTerminationPaymentType(Enum):
    O = 'O'
    R = 'R'


class EntitlementFinalPayPayoutType(Enum):
    NOTPAIDOUT = 'NOTPAIDOUT'
    PAIDOUT = 'PAIDOUT'


class LeaveAccrualLine(BaseModel):
    AutoCalculate: Optional[bool] = Field(
        None, description='If you want to auto calculate leave.', examples=[True]
    )
    LeaveTypeID: Optional[UUID] = Field(
        None,
        description='Xero identifier for the Leave type.',
        examples=['e0eb6747-7c17-4075-b804-989f8d4e5d39'],
    )
    NumberOfUnits: Optional[float] = Field(
        None, description='Leave Accrual number of units', examples=[105.5]
    )


class LeaveBalance(BaseModel):
    LeaveName: Optional[str] = Field(
        None, description='The name of the leave type', examples=['Annual Leave']
    )
    LeaveTypeID: Optional[str] = Field(
        None,
        description='Identifier of the leave type (see PayItems)',
        examples=['544d9292-4329-4512-bfff-a9f15236d776'],
    )
    NumberOfUnits: Optional[float] = Field(
        None, description='The balance of the leave available', examples=[81.2602]
    )
    TypeOfUnits: Optional[str] = Field(
        None,
        description='The type of units as specified by the LeaveType (see PayItems)',
        examples=['Hours'],
    )


class LeaveEarningsLine(BaseModel):
    EarningsRateID: Optional[UUID] = Field(
        None,
        description='Xero identifier',
        examples=['e0eb6747-7c17-4075-b804-989f8d4e5d39'],
    )
    NumberOfUnits: Optional[float] = Field(
        None, description='Earnings rate number of units.', examples=[2.5]
    )
    RatePerUnit: Optional[float] = Field(
        None, description='Rate per unit of the EarningsLine.', examples=[38]
    )


class LeaveLineCalculationType(Enum):
    NOCALCULATIONREQUIRED = 'NOCALCULATIONREQUIRED'
    FIXEDAMOUNTEACHPERIOD = 'FIXEDAMOUNTEACHPERIOD'
    ENTERRATEINPAYTEMPLATE = 'ENTERRATEINPAYTEMPLATE'
    BASEDONORDINARYEARNINGS = 'BASEDONORDINARYEARNINGS'
    field_ = ''


class LeavePeriodStatus(Enum):
    SCHEDULED = 'SCHEDULED'
    PROCESSED = 'PROCESSED'


class LeaveType(BaseModel):
    CurrentRecord: Optional[bool] = Field(
        None, description='Is the current record', examples=[True]
    )
    IsPaidLeave: Optional[bool] = Field(
        None,
        description='Set this to indicate that an employee will be paid when taking this type of leave',
        examples=[True],
    )
    LeaveLoadingRate: Optional[float] = Field(
        None,
        description='Enter an amount here if your organisation pays an additional percentage on top of ordinary earnings when your employees take leave (typically 17.5%)',
        examples=[2],
    )
    LeaveTypeID: Optional[UUID] = Field(
        None,
        description='Xero identifier',
        examples=['e0eb6747-7c17-4075-b804-989f8d4e5d39'],
    )
    Name: Optional[constr(max_length=100)] = Field(
        None,
        description='Name of the earnings rate (max length = 100)',
        examples=['PTO'],
    )
    NormalEntitlement: Optional[float] = Field(
        None,
        description='The number of units the employee is entitled to each year',
        examples=[152],
    )
    ShowOnPayslip: Optional[bool] = Field(
        None,
        description='Set this if you want a balance for this leave type to be shown on your employee’s payslips',
        examples=[True],
    )
    TypeOfUnits: Optional[str] = Field(
        None,
        description='The type of units by which leave entitlements are normally tracked. These are typically the same as the type of units used for the employee’s ordinary earnings rate',
        examples=['Hours'],
    )
    UpdatedDateUTC: Optional[str] = Field(
        None,
        description='Last modified timestamp',
        examples=['/Date(1583967733054+0000)/'],
    )


class LeaveTypeContributionType(Enum):
    SGC = 'SGC'
    SALARYSACRIFICE = 'SALARYSACRIFICE'
    EMPLOYERADDITIONAL = 'EMPLOYERADDITIONAL'
    EMPLOYEE = 'EMPLOYEE'


class ManualTaxType(Enum):
    PAYGMANUAL = 'PAYGMANUAL'
    ETPOMANUAL = 'ETPOMANUAL'
    ETPRMANUAL = 'ETPRMANUAL'
    SCHEDULE5MANUAL = 'SCHEDULE5MANUAL'
    SCHEDULE5STSLMANUAL = 'SCHEDULE5STSLMANUAL'


class PayRunStatus(Enum):
    DRAFT = 'DRAFT'
    POSTED = 'POSTED'


class PaymentFrequencyType(Enum):
    WEEKLY = 'WEEKLY'
    MONTHLY = 'MONTHLY'
    FORTNIGHTLY = 'FORTNIGHTLY'
    QUARTERLY = 'QUARTERLY'
    TWICEMONTHLY = 'TWICEMONTHLY'
    FOURWEEKLY = 'FOURWEEKLY'
    YEARLY = 'YEARLY'


class PayslipSummary(BaseModel):
    Deductions: Optional[float] = Field(
        None, description='The Deductions for the Payslip', examples=[0]
    )
    EmployeeGroup: Optional[str] = Field(
        None, description='Employee group name', examples=['Marketing']
    )
    EmployeeID: Optional[UUID] = Field(
        None,
        description='The Xero identifier for an employee',
        examples=['4729f087-8eec-49c1-8294-4d11a5a0a37c'],
    )
    FirstName: Optional[str] = Field(
        None, description='First name of employee', examples=['Karen']
    )
    LastName: Optional[str] = Field(
        None, description='Last name of employee', examples=['Jones']
    )
    NetPay: Optional[float] = Field(
        None, description='The NetPay for the Payslip', examples=[862.5]
    )
    PayslipID: Optional[UUID] = Field(
        None,
        description='Xero identifier for the payslip',
        examples=['f3c0874d-7cdd-459a-a95c-d90d51decc42'],
    )
    Reimbursements: Optional[float] = Field(
        None, description='The Reimbursements for the Payslip', examples=[0]
    )
    Super: Optional[float] = Field(
        None, description='The Super for the Payslip', examples=[75.6]
    )
    Tax: Optional[float] = Field(
        None, description='The Tax for the Payslip', examples=[198]
    )
    UpdatedDateUTC: Optional[str] = Field(
        None,
        description='Last modified timestamp',
        examples=['/Date(1583967733054+0000)/'],
    )
    Wages: Optional[float] = Field(
        None, description='The Wages for the Payslip', examples=[1060.5]
    )


class RateType(Enum):
    FIXEDAMOUNT = 'FIXEDAMOUNT'
    MULTIPLE = 'MULTIPLE'
    RATEPERUNIT = 'RATEPERUNIT'


class ReimbursementLine(BaseModel):
    Amount: Optional[float] = Field(
        None, description='Reimbursement type amount', examples=[10]
    )
    Description: Optional[constr(max_length=50)] = Field(
        None,
        description='Reimbursement lines description (max length 50)',
        examples=['For the taxi'],
    )
    ExpenseAccount: Optional[str] = Field(
        None,
        description='Reimbursement expense account. For posted pay run you should be able to see expense account code.',
        examples=[420],
    )
    ReimbursementTypeID: Optional[UUID] = Field(
        None,
        description='Xero reimbursement type identifier',
        examples=['bd246b96-c637-4767-81cf-851ba8fa93c2'],
    )


class ReimbursementLines(BaseModel):
    ReimbursementLines: Optional[List[ReimbursementLine]] = None


class ReimbursementType(BaseModel):
    AccountCode: Optional[str] = Field(None, description='See Accounts', examples=[720])
    CurrentRecord: Optional[bool] = Field(
        None, description='Is the current record', examples=[True]
    )
    Name: Optional[constr(max_length=100)] = Field(
        None,
        description='Name of the earnings rate (max length = 100)',
        examples=['PTO'],
    )
    ReimbursementTypeID: Optional[UUID] = Field(
        None,
        description='Xero identifier',
        examples=['e0eb6747-7c17-4075-b804-989f8d4e5d39'],
    )
    UpdatedDateUTC: Optional[str] = Field(
        None,
        description='Last modified timestamp',
        examples=['/Date(1583967733054+0000)/'],
    )


class ResidencyStatus(Enum):
    AUSTRALIANRESIDENT = 'AUSTRALIANRESIDENT'
    FOREIGNRESIDENT = 'FOREIGNRESIDENT'
    WORKINGHOLIDAYMAKER = 'WORKINGHOLIDAYMAKER'


class EmployeeGroups(BaseModel):
    TrackingCategoryID: Optional[UUID] = Field(
        None,
        description='The identifier for the tracking category',
        examples=['e0eb6747-7c17-4075-b804-989f8d4e5d39'],
    )
    TrackingCategoryName: Optional[str] = Field(
        None, description='Name of the tracking category'
    )


class TimesheetCategories(BaseModel):
    TrackingCategoryID: Optional[UUID] = Field(
        None,
        description='The identifier for the tracking category',
        examples=['e0eb6747-7c17-4075-b804-989f8d4e5d39'],
    )
    TrackingCategoryName: Optional[str] = Field(
        None, description='Name of the tracking category'
    )


class TrackingCategories(BaseModel):
    EmployeeGroups_1: Optional[EmployeeGroups] = Field(
        None,
        alias='EmployeeGroups',
        description='The tracking category used for employees',
    )
    TimesheetCategories_1: Optional[TimesheetCategories] = Field(
        None,
        alias='TimesheetCategories',
        description='The tracking category used for timesheets',
    )


class State(Enum):
    ACT = 'ACT'
    NSW = 'NSW'
    NT = 'NT'
    QLD = 'QLD'
    SA = 'SA'
    TAS = 'TAS'
    VIC = 'VIC'
    WA = 'WA'


class SuperFundProduct(BaseModel):
    ABN: Optional[str] = Field(
        None, description='The ABN of the Regulated SuperFund', examples=[839182848805]
    )
    ProductName: Optional[str] = Field(
        None,
        description='The name of the Regulated SuperFund',
        examples=[
            'MLC Navigator Retirement Plan - Superannuation Service (including Series 2) (MLC Superannuation Fund)'
        ],
    )
    SPIN: Optional[str] = Field(
        None,
        description='The SPIN of the Regulated SuperFund. This field has been deprecated. New superfunds will not have a SPIN value. The USI field should be used instead of SPIN',
        examples=['NML0117AU'],
    )
    USI: Optional[str] = Field(
        None,
        description='The USI of the Regulated SuperFund',
        examples=[839182848805001],
    )


class SuperFundProducts(BaseModel):
    SuperFundProducts: Optional[List[SuperFundProduct]] = None


class SuperFundType(Enum):
    REGULATED = 'REGULATED'
    SMSF = 'SMSF'


class SuperMembership(BaseModel):
    EmployeeNumber: str = Field(
        ...,
        description='The membership number assigned to the employee by the super fund.',
        examples=[1234],
    )
    SuperFundID: UUID = Field(
        ...,
        description='Xero identifier for super fund',
        examples=['2187a42b-639a-45cb-9eed-cd4ae488306a'],
    )
    SuperMembershipID: Optional[UUID] = Field(
        None,
        description='Xero unique identifier for Super membership',
        examples=['4333d5cd-53a5-4c31-98e5-a8b4e5676b0b'],
    )


class SuperannuationCalculationType(Enum):
    FIXEDAMOUNT = 'FIXEDAMOUNT'
    PERCENTAGEOFEARNINGS = 'PERCENTAGEOFEARNINGS'
    STATUTORY = 'STATUTORY'


class SuperannuationContributionType(Enum):
    SGC = 'SGC'
    SALARYSACRIFICE = 'SALARYSACRIFICE'
    EMPLOYERADDITIONAL = 'EMPLOYERADDITIONAL'
    EMPLOYEE = 'EMPLOYEE'


class SuperannuationLine(BaseModel):
    Amount: Optional[float] = Field(
        None, description='Superannuation amount', examples=[10.5]
    )
    CalculationType: Optional[SuperannuationCalculationType] = None
    ContributionType: Optional[SuperannuationContributionType] = None
    ExpenseAccountCode: Optional[str] = Field(
        None, description='Superannuation expense account code.', examples=[450]
    )
    LiabilityAccountCode: Optional[str] = Field(
        None, description='Superannuation liability account code', examples=[650]
    )
    MinimumMonthlyEarnings: Optional[float] = Field(
        None, description='Superannuation minimum monthly earnings.', examples=[100.5]
    )
    PaymentDateForThisPeriod: Optional[str] = Field(
        None,
        description='Superannuation payment date for the current period (YYYY-MM-DD)',
        examples=['/Date(322560000000+0000)/'],
    )
    Percentage: Optional[float] = Field(
        None, description='Superannuation percentage', examples=[4]
    )
    SuperMembershipID: Optional[UUID] = Field(
        None,
        description='Xero identifier for payroll super fund membership ID.',
        examples=['e0eb6747-7c17-4075-b804-989f8d4e5d39'],
    )


class TFNExemptionType(Enum):
    NOTQUOTED = 'NOTQUOTED'
    PENDING = 'PENDING'
    PENSIONER = 'PENSIONER'
    UNDER18 = 'UNDER18'


class TaxDeclaration(BaseModel):
    ApprovedWithholdingVariationPercentage: Optional[float] = Field(
        None,
        description='If the employee has approved withholding variation. e.g (0 - 100)',
        examples=[75],
    )
    AustralianResidentForTaxPurposes: Optional[bool] = Field(
        None,
        description='If the employee is Australian resident for tax purposes. e.g true or false',
        examples=[True],
    )
    EligibleToReceiveLeaveLoading: Optional[bool] = Field(
        None,
        description='If the employee is eligible to receive an additional percentage on top of ordinary earnings when they take leave (typically 17.5%). e.g true or false',
        examples=[False],
    )
    EmployeeID: Optional[UUID] = Field(
        None,
        description='Address line 1 for employee home address',
        examples=['123 Main St'],
    )
    EmploymentBasis_1: Optional[EmploymentBasis] = Field(None, alias='EmploymentBasis')
    HasHELPDebt: Optional[bool] = Field(
        None,
        description='If employee has HECS or HELP debt. e.g true or false',
        examples=[False],
    )
    HasSFSSDebt: Optional[bool] = Field(
        None,
        description='If employee has financial supplement debt. e.g true or false',
        examples=[False],
    )
    HasStudentStartupLoan: Optional[bool] = Field(
        None,
        description='If the employee is eligible for student startup loan rules',
        examples=[True],
    )
    HasTradeSupportLoanDebt: Optional[bool] = Field(
        None,
        description='If employee has trade support loan. e.g true or false',
        examples=[False],
    )
    ResidencyStatus_1: Optional[ResidencyStatus] = Field(None, alias='ResidencyStatus')
    TFNExemptionType_1: Optional[TFNExemptionType] = Field(
        None, alias='TFNExemptionType'
    )
    TaxFileNumber: Optional[str] = Field(
        None, description='The tax file number e.g 123123123.', examples=[123123123]
    )
    TaxFreeThresholdClaimed: Optional[bool] = Field(
        None,
        description='If tax free threshold claimed. e.g true or false',
        examples=[False],
    )
    TaxOffsetEstimatedAmount: Optional[float] = Field(
        None,
        description='If has tax offset estimated then the tax offset estimated amount. e.g 100',
        examples=[100],
    )
    UpdatedDateUTC: Optional[str] = Field(
        None,
        description='Last modified timestamp',
        examples=['/Date(1583967733054+0000)/'],
    )
    UpwardVariationTaxWithholdingAmount: Optional[float] = Field(
        None,
        description='If the employee has requested that additional tax be withheld each pay run. e.g 50',
        examples=[50],
    )


class TaxLine(BaseModel):
    Amount: Optional[float] = Field(
        None, description='The tax line amount', examples=[50]
    )
    Description: Optional[str] = Field(None, description='Description of the tax line.')
    LiabilityAccount: Optional[str] = Field(
        None,
        description='The tax line liability account code. For posted pay run you should be able to see liability account code',
        examples=[620],
    )
    ManualTaxType_1: Optional[ManualTaxType] = Field(None, alias='ManualTaxType')
    PayslipTaxLineID: Optional[UUID] = Field(
        None,
        description='Xero identifier for payslip tax line ID.',
        examples=['e0eb6747-7c17-4075-b804-989f8d4e5d39'],
    )
    TaxTypeName: Optional[str] = Field(
        None, description='Name of the tax type.', examples=['Manual Adjustment']
    )


class TimesheetLine(BaseModel):
    EarningsRateID: Optional[UUID] = Field(
        None,
        description='The Xero identifier for an Earnings Rate',
        examples=['966c5c77-2ef0-4320-b6a9-6c27b080ecc5'],
    )
    NumberOfUnits: Optional[List[float]] = Field(
        None, description='The number of units on a timesheet line'
    )
    TrackingItemID: Optional[UUID] = Field(
        None,
        description='The Xero identifier for a Tracking Category. The TrackingOptionID must belong to the TrackingCategory selected as TimesheetCategories under Payroll Settings.',
        examples=['ae777a87-5ef3-4fa0-a4f0-d10e1f13073a'],
    )
    UpdatedDateUTC: Optional[str] = Field(
        None,
        description='Last modified timestamp',
        examples=['/Date(1583967733054+0000)/'],
    )


class TimesheetLines(RootModel[List[TimesheetLine]]):
    root: List[TimesheetLine]


class TimesheetStatus(Enum):
    DRAFT = 'DRAFT'
    PROCESSED = 'PROCESSED'
    APPROVED = 'APPROVED'
    REJECTED = 'REJECTED'
    REQUESTED = 'REQUESTED'


class ValidationError(BaseModel):
    Message: Optional[str] = Field(None, description='Validation error message')


class Account(BaseModel):
    AccountID: Optional[UUID] = Field(
        None,
        description='Xero identifier for accounts',
        examples=['c56b19ef-75bf-45e8-98a4-e699a96609f7'],
    )
    Code: Optional[str] = Field(
        None, description='Customer defined account code', examples=[420]
    )
    Name: Optional[str] = Field(
        None, description='Name of account', examples=['General expenses']
    )
    Type: Optional[AccountType] = None


class DeductionLine(BaseModel):
    Amount: Optional[float] = Field(
        None, description='Deduction type amount', examples=[10]
    )
    CalculationType: DeductionTypeCalculationType
    DeductionTypeID: UUID = Field(
        ...,
        description='Xero deduction type identifier',
        examples=['59cd9d04-4521-4cc3-93ac-7841651ff407'],
    )
    NumberOfUnits: Optional[float] = Field(
        None, description='Deduction number of units', examples=[10]
    )
    Percentage: Optional[float] = Field(
        None, description='The Percentage of the Deduction', examples=[10]
    )


class EarningsLine(BaseModel):
    Amount: Optional[float] = Field(
        None, description='Earnings rate amount', examples=[38]
    )
    AnnualSalary: Optional[float] = Field(
        None, description='Annual salary for earnings line', examples=[40000]
    )
    CalculationType: Optional[EarningsRateCalculationType] = None
    EarningsRateID: UUID = Field(
        ...,
        description='Xero unique id for earnings rate',
        examples=['72e962d1-fcac-4083-8a71-742bb3e7ae14'],
    )
    FixedAmount: Optional[float] = Field(
        None,
        description='Earnings rate amount. Only applicable if the EarningsRate RateType is Fixed',
        examples=[2.5],
    )
    NormalNumberOfUnits: Optional[float] = Field(
        None,
        description='Normal number of units for EarningsLine. Applicable when RateType is "MULTIPLE"',
        examples=[38],
    )
    NumberOfUnits: Optional[float] = Field(
        None, description='Earnings rate number of units.', examples=[2.5]
    )
    NumberOfUnitsPerWeek: Optional[float] = Field(
        None, description='number of units for earning line', examples=[38]
    )
    RatePerUnit: Optional[float] = Field(
        None, description='Rate per unit of the EarningsLine.', examples=[38]
    )


class EarningsRate(BaseModel):
    AccountCode: Optional[str] = Field(None, description='See Accounts', examples=[720])
    AccrueLeave: Optional[bool] = Field(
        None,
        description='Indicates that this earnings rate should accrue leave. Only applicable if RateType is MULTIPLE',
        examples=[False],
    )
    AllowanceType_1: Optional[AllowanceType] = Field(None, alias='AllowanceType')
    Amount: Optional[float] = Field(
        None,
        description='Optional Amount for FIXEDAMOUNT RateType EarningsRate',
        examples=[50.3],
    )
    CurrentRecord: Optional[bool] = Field(
        None, description='Is the current record', examples=[True]
    )
    EarningsRateID: Optional[UUID] = Field(
        None,
        description='Xero identifier',
        examples=['e0eb6747-7c17-4075-b804-989f8d4e5d39'],
    )
    EarningsType_1: Optional[EarningsType] = Field(None, alias='EarningsType')
    EmploymentTerminationPaymentType_1: Optional[EmploymentTerminationPaymentType] = (
        Field(None, alias='EmploymentTerminationPaymentType')
    )
    IsExemptFromSuper: Optional[bool] = Field(
        None,
        description='See the ATO website for details of which payments are exempt from SGC',
        examples=[False],
    )
    IsExemptFromTax: Optional[bool] = Field(
        None,
        description='Most payments are subject to tax, so you should only set this value if you are sure that a payment is exempt from PAYG withholding',
        examples=[False],
    )
    IsReportableAsW1: Optional[bool] = Field(
        None,
        description='Boolean to determine if the earnings rate is reportable or exempt from W1',
        examples=[False],
    )
    Multiplier: Optional[float] = Field(
        None,
        description='This is the multiplier used to calculate the rate per unit, based on the employee’s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MULTIPLE',
        examples=[1.5],
    )
    Name: Optional[constr(max_length=100)] = Field(
        None,
        description='Name of the earnings rate (max length = 100)',
        examples=['PTO'],
    )
    RatePerUnit: Optional[str] = Field(
        None,
        description='Default rate per unit (optional). Only applicable if RateType is RATEPERUNIT.',
        examples=[10],
    )
    RateType_1: Optional[RateType] = Field(None, alias='RateType')
    TypeOfUnits: Optional[constr(max_length=50)] = Field(
        None,
        description='Type of units used to record earnings (max length = 50). Only When RateType is RATEPERUNIT',
        examples=['Fixed'],
    )
    UpdatedDateUTC: Optional[str] = Field(
        None,
        description='Last modified timestamp',
        examples=['/Date(1583967733054+0000)/'],
    )


class HomeAddress(BaseModel):
    AddressLine1: str = Field(
        ...,
        description='Address line 1 for employee home address',
        examples=['123 Main St'],
    )
    AddressLine2: Optional[str] = Field(
        None, description='Address line 2 for employee home address', examples=['Apt 4']
    )
    City: Optional[str] = Field(
        None, description='Suburb for employee home address', examples=['St. Kilda']
    )
    Country: Optional[str] = Field(
        None, description='Country of HomeAddress', examples=['AUSTRALIA']
    )
    PostalCode: Optional[str] = Field(
        None, description='PostCode for employee home address', examples=[3182]
    )
    Region: Optional[State] = None


class LeaveLine(BaseModel):
    AnnualNumberOfUnits: Optional[float] = Field(
        None, description='Hours of leave accrued each year', examples=[2.5]
    )
    CalculationType: Optional[LeaveLineCalculationType] = None
    EmploymentTerminationPaymentType_1: Optional[EmploymentTerminationPaymentType] = (
        Field(None, alias='EmploymentTerminationPaymentType')
    )
    EntitlementFinalPayPayoutType_1: Optional[EntitlementFinalPayPayoutType] = Field(
        None, alias='EntitlementFinalPayPayoutType'
    )
    FullTimeNumberOfUnitsPerPeriod: Optional[float] = Field(
        None,
        description='Normal ordinary earnings number of units for leave line.',
        examples=[2.5],
    )
    IncludeSuperannuationGuaranteeContribution: Optional[bool] = Field(
        None, description='amount of leave line', examples=[True]
    )
    LeaveTypeID: Optional[UUID] = Field(
        None,
        description='Xero leave type identifier',
        examples=['742998cb-7584-4ecf-aa88-d694f59c50f9'],
    )
    NumberOfUnits: Optional[float] = Field(
        None, description='Number of units for leave line.', examples=[2.5]
    )


class LeaveLines(BaseModel):
    Employee: Optional[List[LeaveLine]] = None


class LeavePeriod(BaseModel):
    LeavePeriodStatus_1: Optional[LeavePeriodStatus] = Field(
        None, alias='LeavePeriodStatus'
    )
    NumberOfUnits: Optional[float] = Field(
        None, description='The Number of Units for the leave', examples=[22.8]
    )
    PayPeriodEndDate: Optional[str] = Field(
        None,
        description='The Pay Period End Date (YYYY-MM-DD)',
        examples=['/Date(322560000000+0000)/'],
    )
    PayPeriodStartDate: Optional[str] = Field(
        None,
        description='The Pay Period Start Date (YYYY-MM-DD)',
        examples=['/Date(322560000000+0000)/'],
    )


class PayItem(BaseModel):
    DeductionTypes: Optional[List[DeductionType]] = None
    EarningsRates: Optional[List[EarningsRate]] = None
    LeaveTypes: Optional[List[LeaveType]] = None
    ReimbursementTypes: Optional[List[ReimbursementType]] = None


class PayItems(BaseModel):
    PayItems: Optional[PayItem] = None


class PayRun(BaseModel):
    Deductions: Optional[float] = Field(
        None, description='The total Deductions for the Payrun', examples=[0]
    )
    NetPay: Optional[float] = Field(
        None, description='The total NetPay for the Payrun', examples=[862.5]
    )
    PayRunID: Optional[UUID] = Field(
        None,
        description='Xero identifier for pay run',
        examples=['bba1d10f-63b1-4692-b5c5-a99f869523a4'],
    )
    PayRunPeriodEndDate: Optional[str] = Field(
        None,
        description='Period End Date for the PayRun (YYYY-MM-DD)',
        examples=['/Date(322560000000+0000)/'],
    )
    PayRunPeriodStartDate: Optional[str] = Field(
        None,
        description='Period Start Date for the PayRun (YYYY-MM-DD)',
        examples=['/Date(322560000000+0000)/'],
    )
    PayRunStatus_1: Optional[PayRunStatus] = Field(None, alias='PayRunStatus')
    PaymentDate: Optional[str] = Field(
        None,
        description='Payment Date for the PayRun (YYYY-MM-DD)',
        examples=['/Date(322560000000+0000)/'],
    )
    PayrollCalendarID: UUID = Field(
        ...,
        description='Xero identifier for pay run',
        examples=['bfac31bd-ea62-4fc8-a5e7-7965d9504b15'],
    )
    PayslipMessage: Optional[str] = Field(
        None,
        description='Payslip message for the PayRun',
        examples=['Thanks for being awesome'],
    )
    Payslips: Optional[List[PayslipSummary]] = Field(
        None, description='The payslips in the payrun'
    )
    Reimbursement: Optional[float] = Field(
        None, description='The total Reimbursements for the Payrun', examples=[0]
    )
    Super: Optional[float] = Field(
        None, description='The total Super for the Payrun', examples=[75.6]
    )
    Tax: Optional[float] = Field(
        None, description='The total Tax for the Payrun', examples=[198]
    )
    UpdatedDateUTC: Optional[str] = Field(
        None,
        description='Last modified timestamp',
        examples=['/Date(1583967733054+0000)/'],
    )
    ValidationErrors: Optional[List[ValidationError]] = Field(
        None, description='Displays array of validation error messages from the API'
    )
    Wages: Optional[float] = Field(
        None, description='The total Wages for the Payrun', examples=[1060.5]
    )


class PayRuns(BaseModel):
    PayRuns: Optional[List[PayRun]] = None


class PayrollCalendar(BaseModel):
    CalendarType_1: Optional[CalendarType] = Field(None, alias='CalendarType')
    Name: Optional[str] = Field(
        None,
        description='Name of the Payroll Calendar',
        examples=['Fortnightly Calendar'],
    )
    PaymentDate: Optional[str] = Field(
        None,
        description='The date on which employees will be paid for the upcoming pay period (YYYY-MM-DD)',
        examples=['/Date(322560000000+0000)/'],
    )
    PayrollCalendarID: Optional[UUID] = Field(
        None,
        description='Xero identifier',
        examples=['e0eb6747-7c17-4075-b804-989f8d4e5d39'],
    )
    StartDate: Optional[str] = Field(
        None,
        description='The start date of the upcoming pay period. The end date will be calculated based upon this date, and the calendar type selected (YYYY-MM-DD)',
        examples=['/Date(322560000000+0000)/'],
    )
    UpdatedDateUTC: Optional[str] = Field(
        None,
        description='Last modified timestamp',
        examples=['/Date(1583967733054+0000)/'],
    )
    ValidationErrors: Optional[List[ValidationError]] = Field(
        None, description='Displays array of validation error messages from the API'
    )


class PayrollCalendars(BaseModel):
    PayrollCalendars: Optional[List[PayrollCalendar]] = None


class Payslip(BaseModel):
    DeductionLines: Optional[List[DeductionLine]] = None
    Deductions: Optional[float] = Field(
        None, description='The Deductions for the Payslip', examples=[0]
    )
    EarningsLines: Optional[List[EarningsLine]] = None
    EmployeeID: Optional[UUID] = Field(
        None,
        description='The Xero identifier for an employee',
        examples=['4729f087-8eec-49c1-8294-4d11a5a0a37c'],
    )
    FirstName: Optional[str] = Field(
        None, description='First name of employee', examples=['Karen']
    )
    LastName: Optional[str] = Field(
        None, description='Last name of employee', examples=['Jones']
    )
    LeaveAccrualLines: Optional[List[LeaveAccrualLine]] = None
    LeaveEarningsLines: Optional[List[LeaveEarningsLine]] = None
    NetPay: Optional[float] = Field(
        None, description='The NetPay for the Payslip', examples=[862.5]
    )
    PayslipID: Optional[UUID] = Field(
        None,
        description='Xero identifier for the payslip',
        examples=['f3c0874d-7cdd-459a-a95c-d90d51decc42'],
    )
    ReimbursementLines: Optional[List[ReimbursementLine]] = None
    Reimbursements: Optional[float] = Field(
        None, description='The Reimbursements for the Payslip', examples=[0]
    )
    Super: Optional[float] = Field(
        None, description='The Super for the Payslip', examples=[75.6]
    )
    SuperannuationLines: Optional[List[SuperannuationLine]] = None
    Tax: Optional[float] = Field(
        None, description='The Tax for the Payslip', examples=[198]
    )
    TaxLines: Optional[List[TaxLine]] = None
    TimesheetEarningsLines: Optional[List[EarningsLine]] = None
    UpdatedDateUTC: Optional[str] = Field(
        None,
        description='Last modified timestamp',
        examples=['/Date(1583967733054+0000)/'],
    )
    Wages: Optional[float] = Field(
        None, description='The Wages for the Payslip', examples=[1060.5]
    )


class PayslipLines(BaseModel):
    DeductionLines: Optional[List[DeductionLine]] = None
    EarningsLines: Optional[List[EarningsLine]] = None
    LeaveAccrualLines: Optional[List[LeaveAccrualLine]] = None
    LeaveEarningsLines: Optional[List[LeaveEarningsLine]] = None
    ReimbursementLines: Optional[List[ReimbursementLine]] = None
    SuperannuationLines: Optional[List[SuperannuationLine]] = None
    TaxLines: Optional[List[TaxLine]] = None
    TimesheetEarningsLines: Optional[List[EarningsLine]] = None


class PayslipObject(BaseModel):
    Payslip_1: Optional[Payslip] = Field(None, alias='Payslip')


class Payslips(BaseModel):
    Payslips: Optional[List[Payslip]] = None


class Settings(BaseModel):
    Accounts: Optional[List[Account]] = Field(
        None,
        description='Payroll Account details for SuperExpense, SuperLiabilty, WagesExpense, PAYGLiability & WagesPayable.',
    )
    DaysInPayrollYear: Optional[int] = Field(
        None, description='Number of days in the Payroll year', examples=[365]
    )
    TrackingCategories_1: Optional[TrackingCategories] = Field(
        None,
        alias='TrackingCategories',
        description='Tracking categories for Employees and Timesheets',
    )


class SettingsObject(BaseModel):
    Settings_1: Optional[Settings] = Field(None, alias='Settings')


class SuperFund(BaseModel):
    ABN: Optional[str] = Field(
        None, description='ABN of the self managed super fund', examples=[40022701955]
    )
    AccountName: Optional[str] = Field(
        None,
        description='The account name for the self managed super fund.',
        examples=['Money account'],
    )
    AccountNumber: Optional[str] = Field(
        None,
        description='The account number for the self managed super fund.',
        examples=[234234234],
    )
    BSB: Optional[str] = Field(
        None, description='BSB of the self managed super fund', examples=[234324]
    )
    ElectronicServiceAddress: Optional[str] = Field(
        None,
        description='The electronic service address for the self managed super fund.',
        examples=[12345678],
    )
    EmployerNumber: Optional[str] = Field(
        None,
        description='Some funds assign a unique number to each employer',
        examples=[324324],
    )
    Name: Optional[str] = Field(
        None,
        description='Name of the super fund',
        examples=[
            'MLC Navigator Retirement Plan - Superannuation Service (including Series 2) (MLC Superannuation Fund)'
        ],
    )
    SPIN: Optional[str] = Field(
        None,
        description='The SPIN of the Regulated SuperFund. This field has been deprecated. It will only be present for legacy superfunds. New superfunds will not have a SPIN value. The USI field should be used instead of SPIN.',
        examples=[4545445454],
    )
    SuperFundID: Optional[UUID] = Field(
        None,
        description='Xero identifier for a super fund',
        examples=['bfac31bd-ea62-4fc8-a5e7-7965d9504b15'],
    )
    Type: SuperFundType
    USI: Optional[str] = Field(
        None,
        description='The USI of the Regulated SuperFund',
        examples=[40022701955001],
    )
    UpdatedDateUTC: Optional[str] = Field(
        None,
        description='Last modified timestamp',
        examples=['/Date(1583967733054+0000)/'],
    )
    ValidationErrors: Optional[List[ValidationError]] = Field(
        None, description='Displays array of validation error messages from the API'
    )


class SuperFunds(BaseModel):
    SuperFunds: Optional[List[SuperFund]] = None


class SuperLine(BaseModel):
    Amount: Optional[float] = Field(
        None, description='Super membership amount', examples=[10]
    )
    CalculationType: Optional[SuperannuationCalculationType] = None
    ContributionType: Optional[SuperannuationContributionType] = None
    ExpenseAccountCode: Optional[str] = Field(
        None, description='expense account code', examples=[478]
    )
    LiabilityAccountCode: Optional[str] = Field(
        None, description='liabilty account code', examples=[826]
    )
    MinimumMonthlyEarnings: Optional[float] = Field(
        None, description='amount of minimum earnings', examples=[450]
    )
    Percentage: Optional[float] = Field(
        None, description='percentage for super line', examples=[9]
    )
    SuperMembershipID: Optional[UUID] = Field(
        None,
        description='Xero super membership ID',
        examples=['4333d5cd-53a5-4c31-98e5-a8b4e5676b0b'],
    )


class Timesheet(BaseModel):
    EmployeeID: UUID = Field(
        ...,
        description='The Xero identifier for an employee',
        examples=['72a0d0c2-0cf8-4f0b-ade1-33231f47b41b'],
    )
    EndDate: str = Field(
        ...,
        description='Period end date (YYYY-MM-DD)',
        examples=['/Date(322560000000+0000)/'],
    )
    Hours: Optional[float] = Field(
        None, description='Timesheet total hours', examples=[31]
    )
    StartDate: str = Field(
        ...,
        description='Period start date (YYYY-MM-DD)',
        examples=['/Date(322560000000+0000)/'],
    )
    Status: Optional[TimesheetStatus] = None
    TimesheetID: Optional[UUID] = Field(
        None,
        description='The Xero identifier for a Payroll Timesheet',
        examples=['049765fc-4506-48fb-bf88-3578dec0ec47'],
    )
    TimesheetLines_1: Optional[TimesheetLines] = Field(None, alias='TimesheetLines')
    UpdatedDateUTC: Optional[str] = Field(
        None,
        description='Last modified timestamp',
        examples=['/Date(1583967733054+0000)/'],
    )
    ValidationErrors: Optional[List[ValidationError]] = Field(
        None, description='Displays array of validation error messages from the API'
    )


class TimesheetObject(BaseModel):
    Timesheet_1: Optional[Timesheet] = Field(None, alias='Timesheet')


class Timesheets(BaseModel):
    Timesheets: Optional[List[Timesheet]] = None


class PayRunsPostRequest(RootModel[List[PayRun]]):
    root: List[PayRun]


class PayRunsPayRunIDPostRequest(RootModel[List[PayRun]]):
    root: List[PayRun] = Field(..., examples=['[ { "PayRunStatus": "POSTED" } ]'])


class PayrollCalendarsPostRequest(RootModel[List[PayrollCalendar]]):
    root: List[PayrollCalendar]


class PayslipPayslipIDPostRequest(RootModel[List[PayslipLines]]):
    root: List[PayslipLines]


class SuperfundsPostRequest(RootModel[List[SuperFund]]):
    root: List[SuperFund]


class SuperfundsSuperFundIDPostRequest(RootModel[List[SuperFund]]):
    root: List[SuperFund]


class TimesheetsPostRequest(RootModel[List[Timesheet]]):
    root: List[Timesheet]


class TimesheetsTimesheetIDPostRequest(RootModel[List[Timesheet]]):
    root: List[Timesheet]


class LeaveApplication(BaseModel):
    Description: Optional[str] = Field(
        None, description='The Description of the Leave', examples=['My leave']
    )
    EmployeeID: Optional[UUID] = Field(
        None,
        description='The Xero identifier for Payroll Employee',
        examples=['fb4ebd68-6568-41eb-96ab-628a0f54b4b8'],
    )
    EndDate: Optional[str] = Field(
        None,
        description='End date of the leave (YYYY-MM-DD)',
        examples=['/Date(322560000000+0000)/'],
    )
    LeaveApplicationID: Optional[UUID] = Field(
        None,
        description='The Xero identifier for Payroll Employee',
        examples=['e0eb6747-7c17-4075-b804-989f8d4e5d39'],
    )
    LeavePeriods: Optional[List[LeavePeriod]] = None
    LeaveTypeID: Optional[UUID] = Field(
        None,
        description='The Xero identifier for Leave Type',
        examples=['742998cb-7584-4ecf-aa88-d694f59c50f9'],
    )
    StartDate: Optional[str] = Field(
        None,
        description='Start date of the leave (YYYY-MM-DD)',
        examples=['/Date(322560000000+0000)/'],
    )
    Title: Optional[str] = Field(
        None, description='The title of the leave', examples=['Annual Leave']
    )
    UpdatedDateUTC: Optional[str] = Field(
        None,
        description='Last modified timestamp',
        examples=['/Date(1583967733054+0000)/'],
    )
    ValidationErrors: Optional[List[ValidationError]] = Field(
        None, description='Displays array of validation error messages from the API'
    )


class LeaveApplications(BaseModel):
    LeaveApplications: Optional[List[LeaveApplication]] = None


class OpeningBalances(BaseModel):
    DeductionLines: Optional[List[DeductionLine]] = None
    EarningsLines: Optional[List[EarningsLine]] = None
    LeaveLines: Optional[List[LeaveLine]] = None
    OpeningBalanceDate: Optional[str] = Field(
        None,
        description='Opening Balance Date. (YYYY-MM-DD)',
        examples=['/Date(322560000000+0000)/'],
    )
    ReimbursementLines: Optional[List[ReimbursementLine]] = None
    SuperLines: Optional[List[SuperLine]] = None
    Tax: Optional[str] = Field(
        None,
        description='Opening Balance tax',
        examples=['4333d5cd-53a5-4c31-98e5-a8b4e5676b0b'],
    )


class PayTemplate(BaseModel):
    DeductionLines: Optional[List[DeductionLine]] = None
    EarningsLines: Optional[List[EarningsLine]] = None
    LeaveLines: Optional[List[LeaveLine]] = None
    ReimbursementLines: Optional[List[ReimbursementLine]] = None
    SuperLines: Optional[List[SuperLine]] = None


class LeaveApplicationsPostRequest(RootModel[List[LeaveApplication]]):
    root: List[LeaveApplication]


class LeaveApplicationsLeaveApplicationIDPostRequest(RootModel[List[LeaveApplication]]):
    root: List[LeaveApplication]


class Employee(BaseModel):
    BankAccounts: Optional[List[BankAccount]] = None
    Classification: Optional[str] = Field(
        None, description='Employees classification', examples=[99383]
    )
    DateOfBirth: str = Field(
        ...,
        description='Date of birth of the employee (YYYY-MM-DD)',
        examples=['/Date(322560000000+0000)/'],
    )
    Email: Optional[str] = Field(
        None,
        description='The email address for the employee',
        examples=['developer@me.com'],
    )
    EmployeeGroupName: Optional[str] = Field(
        None,
        description='The Employee Group allows you to report on payroll expenses and liabilities for each group of employees',
        examples=['marketing'],
    )
    EmployeeID: Optional[UUID] = Field(
        None,
        description='Xero unique identifier for an Employee',
        examples=['4ff1e5cc-9835-40d5-bb18-09fdb118db9c'],
    )
    FirstName: str = Field(
        ..., description='First name of employee', examples=['Karen']
    )
    Gender_1: Optional[Gender] = Field(
        None,
        alias='Gender',
        description='The employee’s gender. See\xa0Employee Gender',
        examples=['F'],
    )
    HomeAddress_1: Optional[HomeAddress] = Field(None, alias='HomeAddress')
    IsAuthorisedToApproveLeave: Optional[bool] = Field(
        None,
        description="Authorised to approve other employees' leave requests",
        examples=[False],
    )
    IsAuthorisedToApproveTimesheets: Optional[bool] = Field(
        None, description='Authorised to approve timesheets', examples=[True]
    )
    JobTitle: Optional[str] = Field(
        None, description='JobTitle of the employee', examples=['Manager']
    )
    LastName: str = Field(..., description='Last name of employee', examples=['Jones'])
    LeaveBalances: Optional[List[LeaveBalance]] = None
    LeaveLines: Optional[List[LeaveLine]] = None
    MiddleNames: Optional[str] = Field(
        None, description='Middle name(s) of the employee', examples=['Adena']
    )
    Mobile: Optional[str] = Field(
        None, description='Employee mobile number', examples=['415-234-5678']
    )
    OpeningBalances_1: Optional[OpeningBalances] = Field(None, alias='OpeningBalances')
    OrdinaryEarningsRateID: Optional[UUID] = Field(
        None,
        description='Xero unique identifier for earnings rate',
        examples=['5gj1e5cc-9835-40d5-bb18-09fdb118db9c'],
    )
    PayTemplate_1: Optional[PayTemplate] = Field(None, alias='PayTemplate')
    PayrollCalendarID: Optional[UUID] = Field(
        None,
        description='Xero unique identifier for payroll calendar for the employee',
        examples=['2ee8e5cc-9835-40d5-bb18-09fdb118db9c'],
    )
    Phone: Optional[str] = Field(
        None, description='Employee phone number', examples=['415-555-1212']
    )
    StartDate: Optional[str] = Field(
        None,
        description='Start date for an employee (YYYY-MM-DD)',
        examples=['/Date(320284900000+0000)/'],
    )
    Status: Optional[EmployeeStatus] = None
    SuperMemberships: Optional[List[SuperMembership]] = None
    TaxDeclaration_1: Optional[TaxDeclaration] = Field(None, alias='TaxDeclaration')
    TerminationDate: Optional[str] = Field(
        None,
        description='Employee Termination Date (YYYY-MM-DD)',
        examples=['/Date(1584662400000+0000)/'],
    )
    Title: Optional[str] = Field(
        None, description='Title of the employee', examples=['Mrs']
    )
    TwitterUserName: Optional[str] = Field(
        None, description='Employee’s twitter name', examples=['xeroapi']
    )
    UpdatedDateUTC: Optional[str] = Field(
        None,
        description='Last modified timestamp',
        examples=['/Date(1583967733054+0000)/'],
    )
    ValidationErrors: Optional[List[ValidationError]] = Field(
        None, description='Displays array of validation error messages from the API'
    )


class Employees(BaseModel):
    Employees: Optional[List[Employee]] = None


class EmployeesPostRequest(RootModel[List[Employee]]):
    root: List[Employee]


class EmployeesEmployeeIDPostRequest(RootModel[List[Employee]]):
    root: List[Employee]
